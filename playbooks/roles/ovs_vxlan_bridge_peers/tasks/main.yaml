---
# This dynamically configures a unique offset for this peer
- name: Set offset
  set_fact:
    offset: "{{ ovs_starting_offset | int + 1 + groups['all'].index(inventory_hostname) }}"

- name: Add additional vni offset
  set_fact:
    vni: "{{ offset | int + ovs_vni_offset | int }}"

# To make things more readable in the following tasks
- name: Alias the primary node private IP
  set_fact:
    primary_private_ip: "{{ hostvars[groups['primary'][0]]['nodepool']['private_ipv4'] }}"

- name: Add port to bridge on primary
  shell: >-
    ovs-vsctl --may-exist add-port {{ bridge_name }}
    {{ bridge_name }}_{{ nodepool['private_ipv4'] }}
    -- set interface {{ bridge_name}}_{{ nodepool['private_ipv4'] }}
    type=vxlan options:remote_ip={{ nodepool['private_ipv4'] }} options:key={{ vni }}
    options:local_ip={{ primary_private_ip }}
  delegate_to: "{{ groups['primary'][0] }}"

- name: Create bridge on subnode
  openvswitch_bridge:
    bridge: "{{ bridge_name }}"

- when: ovs_bridge_mtu is not defined
  block:
    - name: Determine bridge mtu
      shell: |
        # Find all interfaces with a permanent mac address type.
        # Permanent mac addrs imply "real" hardware and not interfaces we have
        # created through this system. This makes our MTU determination mostly
        # idempotent allowing us to create multiple overlays without
        # perpetually smaller MTUs.
        SMALLEST_MTU=""
        for X in $(ls /sys/class/net) ; do
            MAC_TYPE=$(cat "/sys/class/net/${X}/addr_assign_type")
            if [ "$MAC_TYPE" -ne "0" ] ; then
                # Type 0 is a permanent address implying a "real"
                # interface. We ignore other interfaces as that is what we
                # create here
                continue
            fi
            MTU=$(cat "/sys/class/net/${X}/mtu")
            if [ -z "$SMALLEST_MTU" ] || [ "$SMALLEST_MTU" -gt "$MTU" ] ; then
                SMALLEST_MTU=$MTU
            fi
        done
        # 50 byte overhead for vxlan
        echo $(( SMALLEST_MTU - 50 ))
      args:
        executable: /bin/bash
      environment:
        PATH: '{{ ansible_env.PATH }}:/bin:/sbin:/usr/sbin'
      register: mtu_output
    - name: Set ovs_bridge_mtu
      set_fact:
        ovs_bridge_mtu: "{{ mtu_output.stdout }}"

- name: Set MTU on subnode bridge
  command: ip link set mtu {{ ovs_bridge_mtu }} dev {{ bridge_name }}

- name: Add port to bridge on subnode
  shell: >-
    ovs-vsctl --may-exist add-port {{ bridge_name }}
    {{ bridge_name }}_{{ primary_private_ip }}
    -- set interface {{ bridge_name}}_{{ primary_private_ip }}
    type=vxlan options:remote_ip={{ primary_private_ip }} options:key={{ vni }}
    options:local_ip={{ nodepool['private_ipv4'] }}

- when: set_ips
  block:
    - name: Verify if the bridge address is set
      shell: ip addr show dev {{ bridge_name }} | grep -q {{ pub_addr_prefix }}.{{ offset }}/{{ pub_addr_mask }}
      register: ip_addr_var
      failed_when: False
      changed_when: False

    - name: Set the bridge address
      command: ip addr add {{ pub_addr_prefix }}.{{ offset }}/{{ pub_addr_mask }} dev {{ bridge_name }}
      become: yes
      when: ip_addr_var.rc == 1

- name: Bring subnode bridge interface up
  command: ip link set dev {{ bridge_name }} up
